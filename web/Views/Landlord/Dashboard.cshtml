@using BricksAndHearts.Auth
@model LandlordDashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}

@if (Model.CurrentLandlord.Disabled)
{
    <div class="row">
        <div class="col-sm-auto profile-photo-lg">
            <img src="@(((BricksAndHeartsUser)User.Identity!).GoogleProfileImageUrl ?? Url.Content("~/images/profileDefault.png"))" alt="profile picture">
        </div>
        <div class="col">
            <div class="row">
                <h6 class="font-body">Hello</h6>
                <h2 class="font-blue font-h1">@Model.CurrentLandlord.FirstName</h2>
                <p class="font-body font-orange mt-1">
                    Your landlord status has been disabled. Please contact Change Ahead for more information.
                </p>
            </div>
        </div>
    </div>
    return;
}

<div class="row mt-4">
    <div class="col">
        <div class="row">
            <div class="col-sm-auto profile-photo-lg">
                <img src="@(((BricksAndHeartsUser)User.Identity!).GoogleProfileImageUrl ?? Url.Content("~/images/profileDefault.png"))" alt="profile picture">
            </div>
            <div class="col">
                <div class="row">
                    <h6 class="font-body">Hello</h6>
                    <h2 class="font-blue font-h1">@Model.CurrentLandlord.FirstName</h2>
                    @if (Model.CurrentLandlord.NumOfProperties > 0)
                    {
                        <h6 class="font-body">View your properties</h6>
                        <div>
                            <a class="btn btn-primary btn-lg mt-3 align-middle" href='@Url.Action("ViewMyProperties", "Landlord")'>View properties</a>
                        </div>
                    }
                    else
                    {
                        <h6 class="font-body">Start adding your properties to the portal to get matches</h6>
                        <div>
                            <a class="btn btn-primary btn-lg mt-3 align-middle" href='@Url.Action("PropertyInputStepOnePostcode", "Property", new { landlordId = Model.CurrentLandlord.LandlordId, propertyId = 0, operationType = "add" })'>Add properties</a>
                        </div>
                    }
                    @if (!Model.CurrentLandlord.CharterApproved)
                    {
                        <p class="font-subtitle font-orange mt-1">
                            * Your properties won't go live until the Change Ahead charter signup has been approved by the Change Ahead admins. You can still add and update draft properties before then.
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="col">
        <h6 class="font-h3 mb-3">My stats</h6>
        @{ await Html.RenderPartialAsync("_DashboardStatsBoxPartial", new StatBoxModel
           {
               IconName = Model.CurrentLandlord.CharterApproved ? "bi-check" : "bi-x",
               Stat = Model.CurrentLandlord.CharterApproved ? "Approved" : "Not Approved",
               StatDescription = "Charter approval state"
           }); }
        @{ await Html.RenderPartialAsync("_DashboardStatsBoxPartial", new StatBoxModel
           {
               IconName = "bi-house",
               Stat = Model.PropertyTypeCount!.RegisteredProperties.ToString(),
               StatDescription = "Total properties"
           }); }
        @{ await Html.RenderPartialAsync("_DashboardStatsBoxPartial", new StatBoxModel
           {
               IconName = "bi-house-door",
               Stat = Model.PropertyTypeCount.AvailableProperties.ToString(),
               StatDescription = "Available properties"
           }); }
        @{ await Html.RenderPartialAsync("_DashboardStatsBoxPartial", new StatBoxModel
           {
               IconName = "bi-house-heart",
               Stat = Model.PropertyTypeCount.LiveProperties.ToString(),
               StatDescription = "Live properties"
           }); }
    </div>
    <div class="col">
        <div class="d-flex">
            <h6 class="flex-row flex-grow-1 font-h3 mb-3">My properties</h6>
            <a class="flex-row-reverse font-body font-blue" href='@Url.Action("ViewMyProperties", "Landlord")'>View all</a>
        </div>
        @foreach (var property in Model.Properties!)
        {
            <row>
                @{ await Html.RenderPartialAsync("_DashboardPropertyDisplayPartial", property); }
            </row>
        }
    </div>
</div>
