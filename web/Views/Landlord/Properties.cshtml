@using BricksAndHearts.Auth
@model PropertyListModel

@{
    ViewData["Title"] = "Properties";
}

<div class="mx-md-5">
    <h1 class="font-h1 mt-5">
        @if (Model.Owner == null)
        {
            @("Landlord's properties")
        }
        else if (Model.Owner.LandlordId == ((BricksAndHeartsUser)User.Identity!).LandlordId)
        {
            @("My properties")
        }
        else
        {
            @(Model.Owner.FirstName + "'s properties")
        }
    </h1>

    <div class="row mt-4">
        @* Sorting and filtering goes here *@

        <div class="col-auto ms-sm-auto">
            <a class="btn btn-primary" href="@Url.Action("PropertyInputStepOnePostcode", "Property", new { landlordId = Model.Owner?.LandlordId, propertyId = 0, operationType = "add"})">Add new property</a>
        </div>
    </div>

    <partial name="../Property/_PropertyTable"/>

    @{ await Html.RenderPartialAsync("_PaginationPartial", new PaginationModel
       {
           Page = Model.Page,
           Total = Model.Total,
           ItemsPerPage = Model.PropPerPage,
           ItemsOnPage = Model.Properties.Count,
           HrefPrevious = Url.Action("ViewProperties", "Landlord", new { sortBy = Model.SortBy, page = Model.Page - 1, propPerPage = Model.PropPerPage }),
           HrefNext = Url.Action("ViewProperties", "Landlord", new { sortBy = Model.SortBy, page = Model.Page + 1, propPerPage = Model.PropPerPage }),
           TypeOfData = "properties"
       }); }

</div>