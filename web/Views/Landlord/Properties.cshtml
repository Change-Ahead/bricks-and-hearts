@using BricksAndHearts.Auth
@model PropertyListModel

@{
    ViewData["Title"] = "Properties";
}

<div class="mx-md-5">
    <h1 class="font-h1 mt-5">
        @if (Model.Owner == null)
        {
            @("Landlord's properties")
        }
        else if (Model.Owner.LandlordId == ((BricksAndHeartsUser)User.Identity!).LandlordId)
        {
            @("My properties")
        }
        else
        {
            @(Model.Owner.FirstName + "'s properties")
        }
    </h1>

   <div class="row mt-4">
        @* Sorting and filtering goes here *@

        <div class="col-auto ms-sm-auto">
            <a asp-controller="Property" asp-action="AddNewProperty_Begin" asp-route-landlordId="@Model.Owner?.LandlordId" class="btn btn-primary">Add new property</a>
        </div>
    </div>

    @{ var from = (Model.Page - 1) * Model.PropPerPage + 1;
        var to = Math.Min((Model.Page - 1) * Model.PropPerPage + Model.PropPerPage, Model.Total);}

    @if (Model.Properties.Count > 0)
    {<p>Displaying properties @from to @to of @Model.Total</p>}


    @if (Model.Page > 1)
    {
        <a type="button" class="btn btn-outline-primary" href="@Url.Action("ViewProperties", "Landlord", new { sortBy = Model.SortBy, page = Model.Page - 1, propPerPage = Model.PropPerPage })">
            <i class="previous"> Previous </i>
        </a>
    }

    @if (Model.Page <= Model.Total/Model.PropPerPage)
    {
        <a type="button" class="btn btn-outline-primary" href="@Url.Action("ViewProperties", "Landlord", new { sortBy = Model.SortBy, page = Model.Page + 1, propPerPage = Model.PropPerPage })">
            <i class="bi"> Next </i>
        </a>
    }
</div>