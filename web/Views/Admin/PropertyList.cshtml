@model PropertyListModel

@{
    ViewData["Title"] = "Properties";
}

<div class="mx-md-5">
    <h1 class="font-h1 mt-5">Properties</h1>

    <div class="row mt-4">
        <div class="col-auto me-auto mb-2">
            <form asp-action="PropertyList" asp-controller="Property" method="get" class="row mx-0">
                @Html.DropDownListFor(
                    model => model.SortBy,
                    new List<SelectListItem>
                    {
                        new("Sort by availability", "Availability"),
                        new("Sort by rent", "Rent"),
                        new("Sort by location", "Location")
                    },
                    new { @class = "form-select col h-auto me-3", @onchange = "checkIfSelectedValueIsTarget('Location', 'SortBy'); insertDefaultPostcodeIfNotSortByLocation(id)" })
                <div id="ifTrue" class="col-auto" style="@(Model.SortBy != "Location" ? "display: none;" : "")">
                    <input class="form-control col h-auto me-3" id="target" name="target" required placeholder="Enter postcode to sort by location" pattern="([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))\s?[0-9][A-Za-z]{2})"/>
                </div>
                <button type="submit" class="btn btn-outline-primary col">Sort</button>
            </form>
        </div>

        <div class="col-auto ms-sm-auto">
            <a asp-controller="Property" asp-action="AddNewProperty_Begin" asp-route-landlordId="@Model.Owner?.LandlordId" class="btn btn-primary">Add new property</a>
        </div>
    </div>

    @if (Model.SortBy is not null)
    {
        <div>Currently sorted by @Model.SortBy</div>
    }
    @if (Model.SortBy == "Location")
    {
        <div>Showing properties in order of distance from @Model.Target</div>
    }

    <partial name="../Property/_PropertyTable"/>

    @{ await Html.RenderPartialAsync("_PaginationPartial", new PaginationModel
       {
           Page = Model.Page,
           Total = Model.Total,
           ItemsPerPage = Model.PropPerPage,
           ItemsOnPage = Model.Properties.Count,
           HrefPrevious = Url.Action("PropertyList", "Property", new { sortBy = Model.SortBy, target = Model.Target, page = Model.Page - 1, propPerPage = Model.PropPerPage }),
           HrefNext = Url.Action("PropertyList", "Property", new { sortBy = Model.SortBy, target = Model.Target, page = Model.Page + 1, propPerPage = Model.PropPerPage })
       }); }
</div>

