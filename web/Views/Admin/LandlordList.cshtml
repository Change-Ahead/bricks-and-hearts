@using Microsoft.Extensions.Primitives
@model LandlordListModel

@{
    ViewData["Title"] = "Landlord List";
}

@functions
{
    string GetCollapseClass()
    {
        var isApproved = Context.Request.Query["IsApproved"];
        var isAssigned = Context.Request.Query["IsAssigned"];
        if (isApproved == new StringValues("true") || isApproved == new StringValues("false")
            || isAssigned == new StringValues("true") || isAssigned == new StringValues("false"))
        {
            return "show";
        }
        return string.Empty;
    }
}

<h1 class="font-h1 mt-5">Landlords</h1>

<div class="row mt-3">
    <div class="col-auto">
        <a class="btn btn-primary mb-3" data-bs-toggle="collapse" href="#dropdown-contents" role="button" aria-expanded="false" aria-controls="dropdown-contents">
            <i class="bi bi-arrow-90deg-down"></i> Filter
        </a>
    </div>
    <div class="col-auto ms-auto">
        <a class="btn btn-primary" asp-controller="Landlord" asp-action="RegisterGet" asp-route-createUnassigned="true">Create unassigned landlord</a>
    </div>
</div>

<div class="collapse @GetCollapseClass()" id="dropdown-contents">
    <form asp-action="LandlordList" asp-controller="Admin" method="get">
        <div class="row my-3">
            <div class="col-auto mb-2">
                @Html.DropDownListFor(
                    model => model.IsApproved,
                    new List<SelectListItem>
                    {
                        new("Approved landlords", "true"),
                        new("Unapproved landlords", "false")
                    },
                    "Filter by approval status",
                    new { @class = "form-select" }
                    )
            </div>
            <div class="col-auto mb-2">
                @Html.DropDownListFor(
                    model => model.IsAssigned,
                    new List<SelectListItem>
                    {
                        new("Assigned landlords", "true"),
                        new("Unassigned landlords", "false")
                    },
                    "Filter by assignment status",
                    new { @class = "form-select" }
                    )
            </div>
            <div class="col-auto d-grid">
                <button type="submit" class="btn btn-primary">Apply filters</button>
            </div>
        </div>
    </form>
</div>

<partial name="_LandlordTable"/>

@{ await Html.RenderPartialAsync("_PaginationPartial", new PaginationModel
   {
       Page = Model.Page,
       Total = Model.Total,
       ItemsPerPage = Model.LandlordsPerPage,
       ItemsOnPage = Model.LandlordList!.Count,
       HrefPrevious = Url.Action("LandlordList", "Admin", new { isApproved = Model.IsApproved, isAssigned = Model.IsAssigned, page = Model.Page - 1, landlordsPerPage = Model.LandlordsPerPage }),
       HrefNext = Url.Action("LandlordList", "Admin", new { isApproved = Model.IsApproved, isAssigned = Model.IsAssigned, page = Model.Page + 1, landlordsPerPage = Model.LandlordsPerPage }),
       TypeOfData = "landlords"
   }); }