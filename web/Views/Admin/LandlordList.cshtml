@model LandlordListModel

@{
    ViewData["Title"] = "Landlord List";
}

<h2>Landlord List</h2>

<a class="btn btn-primary" asp-controller="Landlord" asp-action="RegisterGet" asp-route-createUnassigned="true">Create Unassigned Landlord</a> <br/>

<p></p>
@using (Html.BeginForm("LandlordList", "Admin", FormMethod.Get))
{
    <div class="row g-3">

        <div class="col-auto d-grid">
            @Html.DropDownListFor(
                model => model.IsApproved,
                new List<SelectListItem>
                {
                    new("Display approved landlords", "true"),
                    new("Display unapproved landlords", "false")
                }, 
                "Filter by approval status",
                new { @class="form-select" }
                )
        </div>
        <div class="col-auto d-grid">
            @Html.DropDownListFor(
                model => model.IsAssigned,
                new List<SelectListItem>
                {
                    new("Display assigned landlords", "true"),
                    new("Display unassigned landlords", "false")
                }, 
                "Filter by assignment status",
                new { @class="form-select" }
                )
        </div>
        <div class="col-auto d-grid">
            <button type="submit" class="btn btn-primary">Display results</button>
        </div>
    </div>
}
<p></p>

<table class="table">
    <thead>
    @if (Model.LandlordList!.Count > 0)
    {
        <tr>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Company Name</th>
            <th scope="col">Charter Provided by Landlord?</th>
            <th scope="col">Charter Approval Status</th>
            <th scope="col">Profile</th>
            <th scope="col">Properties</th>
        </tr>
    }
    else
    {
        <div>There are no landlords matching your search.</div>
    }
    </thead>
    <tbody>
    @foreach (var landlord in Model.LandlordList!)
    {
        <tr>
            <td>@landlord.FirstName</td>
            <td>@landlord.LastName</td>
            <td>@landlord.CompanyName</td>
            @if (landlord.MembershipId != null)
            {
                <td>Yes</td>
            }
            else
            {
                <td>No</td>
            }
            @if (landlord.CharterApproved)
            {
                <td>Approved</td>
            }
            else
            {
                <td>Pending</td>
            }

            <td>
                <a type="button" class="btn btn-outline-primary" href="@Url.Action("Profile", "Landlord", new { id = landlord.Id })">
                    <i class="bi bi-person"></i>
                </a>
            </td>
            <td>
                <a type="button" class="btn btn-outline-primary" href="@Url.Action("ViewProperties", "Landlord", new { id = landlord.Id })">
                    <i class="bi bi-house"></i>
                </a>
            </td>
        </tr>
    }
    </tbody>
</table>

@{ await Html.RenderPartialAsync("_PaginationPartial", new PaginationModel
   {
       Page = Model.Page,
       Total = Model.Total,
       ItemsPerPage = Model.LandlordsPerPage,
       ItemsOnPage = Model.LandlordList.Count,
       HrefPrevious = Url.Action("LandlordList", "Admin", new { isApproved = Model.IsApproved, isAssigned = Model.IsAssigned, page = Model.Page - 1, landlordsPerPage = Model.LandlordsPerPage }),
       HrefNext = Url.Action("LandlordList", "Admin", new { isApproved = Model.IsApproved, isAssigned = Model.IsAssigned, page = Model.Page + 1, landlordsPerPage = Model.LandlordsPerPage })
   }); }